import React from 'react';

import Head from 'next/head';

import { useRouter } from 'next/router'
import { GetStaticPaths, GetStaticProps } from 'next';

import { ProductObject } from '@/interfaces';
import { api, stripe } from '@/services';

import Images from './images';
import Info from './info';

import * as Styles from './styles';

interface Props {
  product: ProductObject
};

export default function Product({ product }: Props) {
  const { isFallback } = useRouter();

  const [isCheckout, setIsCheckout] = React.useState(false);

  // if(isFallback){
  //   return <p>loading...</p>
  // };

  // console.log(product);
  

  async function handleBuyProduct(){
  //   try {
  //     setIsCheckout(true);
  //     const response = await api.post('/checkout', {
  //       priceId: product.defaultPriceId
  //     });
  //     console.log(response);
      
  //     const { checkoutUrl } = response.data;

  //     window.location.href = checkoutUrl;

  //   } catch (error) {
  //     // Datadog or Sentry
  //     setIsCheckout(false);

  //     alert('Falha ao redirecionar ao checkout');
  //   }
  };

  return (
    <React.Fragment>
      <Head>
        <title>{product?.name} | Ignite Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>

      <Styles.Container>
        <Images isLoading={isFallback} product={product} />
        <Info isLoading={isFallback} product={product} BuyNow={handleBuyProduct} />
      </Styles.Container>

    </React.Fragment>
  )
};

export const getStaticPaths: GetStaticPaths = async() => {
  return {
    paths: [],
    fallback: true,
  }
};

export const getStaticProps: GetStaticProps<any, { id: string }> = async ({ params }: any) => {
  const { data } = await api.get(`/product?product_id=${params.id}`)
  // const product = await stripe.products.retrieve(params.id, {
  //   expand: ['default_price']
  // });

  // const price = product.default_price as Stripe.Price;
  // const unit_amount = price.unit_amount ? price.unit_amount : 0

  const product = {
    ...data[0],
    price: new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(data[0].price)
  }

  return {
    props: {
      product
    },
    revalidate: 60 * 60 * 1 // 1 hour
  };

};