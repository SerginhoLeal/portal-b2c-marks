import React from 'react';
import Stripe from 'stripe';
import Head from 'next/head';
import { GetStaticPaths, GetStaticProps } from 'next';

import { Footer, Header, Images, Info } from '@common';
import { ProductObject } from '@/interfaces';
import { api, stripe } from '@/services';

import * as Styles from './styles';

interface Props {
  product: ProductObject
};

export default function Product({ product }: Props) {
  const [isCheckout, setIsCheckout] = React.useState(false);

  if(!product){
    return <p>loading...</p>
  };

  async function handleBuyProduct(){
    try {
      setIsCheckout(true);
      const response = await api.post('/checkout', {
        priceId: product.defaultPriceId
      });
      console.log(response);
      
      const { checkoutUrl } = response.data;

      window.location.href = checkoutUrl;

    } catch (error) {
      // Datadog or Sentry
      setIsCheckout(false);

      alert('Falha ao redirecionar ao checkout');
    }
    
  };

  return (
    <React.Fragment>
      <Head>
        <title>{product.name} | Ignite Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>

      <Header />

      <Styles.Container>
        <Images product={product} />
        <Info product={product} BuyNow={handleBuyProduct} />
      </Styles.Container>

      <Footer />

    </React.Fragment>
  )
};

export const getStaticPaths: GetStaticPaths = async() => {
  return {
    paths: [],
    fallback: false,
  }
};

export const getStaticProps: GetStaticProps<any, { id: string }> = async ({ params }: any) => {
  const product = await stripe.products.retrieve(params.id, {
    expand: ['default_price']
  });

  const price = product.default_price as Stripe.Price;
  const unit_amount = price.unit_amount ? price.unit_amount : 0

  return {
    props: {
      product: {
        id: product.id,
        name: product.name,
        image: product.images[0],
        description: product.description,
        price: new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL'}).format(unit_amount / 100),
        defaultPriceId: price.id
      }
    },
    revalidate: 60 * 60 * 1 // 1 hour
  };
};